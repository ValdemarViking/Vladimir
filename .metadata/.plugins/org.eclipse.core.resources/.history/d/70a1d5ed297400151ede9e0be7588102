import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;


public  class Main {
	
	public volatile String string;

	public static void main(String[] args) {
		Test test = new Test();
		Class testClass = test.getClass();
		System.out.println(testClass.getName());
		
		int mod = testClass.getModifiers();
		
		if (Modifier.isPublic(mod)) {
			System.out.println("Class public");
		} else {
			System.out.println("Class unpublic");
		}
		if (Modifier.isFinal(mod)) {
			System.out.println("Class Final");
		} else {
			System.out.println("Class unfinal");
		}
		
		System.out.println(testClass.getSuperclass().getName());
		Class[] classesIn = testClass.getInterfaces();
		System.out.println(classesIn.toString());
		// classesIn[0].getName();
		
		Field[] fields = testClass.getDeclaredFields();
		for (Field field: fields){
			System.out.println(field.getType());
			System.out.println(field.getName());
			Class clField = field.getType();
			System.out.println(clField.getName());
		}
		try {
			Field ff = testClass.getDeclaredField("publicField");
			System.out.println("publicField = " + ff);
		} catch (NoSuchFieldException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			Field jkl = testClass.getDeclaredField("privateField");
			
			jkl.setAccessible(true);
			try {
				jkl.setInt(test, 5);
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (NoSuchFieldException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Method[] methods = testClass.getDeclaredMethods();
		for (Method mm: methods){
			mm.setAccessible(true);
			try {
				Object ob = new Object[0];
				mm.invoke(test, ob);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	

	}

}
